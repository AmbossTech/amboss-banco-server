# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type AmbossInfo {
  id: String!
  referral_codes: [ReferralCode!]!
}

type BroadcastLiquidTransaction {
  tx_id: String!
}

input BroadcastLiquidTransactionInput {
  signed_pset: String!
  wallet_account_id: String!
}

input ChangePasswordInput {
  current_master_password_hash: String!
  new_master_password_hash: String!
  new_password_hint: String
  new_protected_symmetric_key: String!
}

type ContactMessage {
  contact_is_sender: Boolean!
  created_at: String!
  id: String!
  payload: String!
}

type ContactMutations {
  create(input: CreateContactInput!): CreateContact!
  send_message(input: SendMessageInput!): SendMessage!
}

input CreateAccountInput {
  liquid_descriptor: String!
  name: String
  type: WalletAccountType!
}

type CreateContact {
  id: String!
  money_address: String!
}

input CreateContactInput {
  money_address: String!
  wallet_id: String!
}

type CreateLightingInvoice {
  payment_request: String!
}

input CreateLightingInvoiceInput {
  amount: Float!
  invoice_description: String
  wallet_account_id: String!
}

type CreateLiquidTransaction {
  base_64: String!
  wallet_account: WalletAccount!
}

type CreateOnchainAddress {
  address: String!
  bip21: String
  network: OnchainAddressType!
}

input CreateOnchainAddressInput {
  amount: Int
  asset: LiquidAssetEnum
  network: OnchainAddressType!
  wallet_account_id: String!
}

type CreateTwoFactorOTP {
  otp_secret: String!
  otp_url: String!
}

type CreateTwoFactorPasskey {
  options: String!
}

type CreateWallet {
  id: String!
}

input CreateWalletDetailsInput {
  protected_mnemonic: String
  type: WalletType!
}

input CreateWalletInput {
  accounts: [CreateAccountInput!]!
  details: CreateWalletDetailsInput!
  name: String
  secp256k1_key_pair: Secp256k1KeyPairInput!
}

type FiatInfo {
  fiat_to_btc: String
  id: String!
}

type LiquidAccount {
  assets: [LiquidAsset!]!
  id: String!
  transactions: [LiquidTransaction!]!
}

type LiquidAsset {
  asset_id: String!
  asset_info: LiquidAssetInfo!
  balance: String!
  fiat_info: FiatInfo!
  id: String!
}

enum LiquidAssetEnum {
  BTC
  USDT
}

type LiquidAssetInfo {
  id: String!
  is_featured: Boolean!
  name: String!
  precision: Float!
  ticker: String!
}

input LiquidRecipientInput {
  address: String!
  amount: String!
  asset_id: String
}

type LiquidTransaction {
  asset_id: String!
  asset_info: LiquidAssetInfo!
  balance: String!
  blinded_url: String!
  block_height: String
  date: String
  fee: String!
  fiat_info: FiatInfo!
  id: String!
  tx_id: String!
  unblinded_url: String!
}

input LnAddressPaymentOption {
  code: String!
  network: String!
}

type LnUrlCurrency {
  code: PaymentOptionCode!
  decimals: Float!
  fixed_fee: String!
  id: String!
  max_sendable: String
  min_sendable: String
  name: String!
  network: PaymentOptionNetwork!
  symbol: String!
  variable_fee_percentage: String!
}

type LnUrlInfo {
  id: String!
  payment_options: [LnUrlCurrency!]!
}

input LnUrlInfoInput {
  money_address: String!
}

type Login {
  access_token: String
  id: String!
  refresh_token: String
  two_factor: TwoFactorLogin
}

input LoginInput {
  email: String!
  master_password_hash: String!
}

type LoginMutations {
  initial(input: LoginInput!): Login!
  passkey: PasskeyLoginMutations!
  two_factor: TwoFactorLoginMutations!
}

type MoneyAddress {
  domains: [String!]!
  id: String!
  user: String!
}

type Mutation {
  contacts: ContactMutations!
  login: LoginMutations!
  logout: Boolean!
  passkey: PasskeyMutations!
  password: PasswordMutations!
  pay(input: PayInput!): PayMutations!
  refreshToken: RefreshToken!
  signUp(input: SignUpInput!): NewAccount!
  two_factor: TwoFactorMutations!
  wallets: WalletMutations!
}

type NewAccount {
  access_token: String!
  id: String!
  refresh_token: String!
}

enum OnchainAddressType {
  BTC
  L_BTC
}

input PasskeyAuthenticateInput {
  options: String!
  protected_symmetric_key: String
}

type PasskeyLoginInit {
  options: String!
  session_id: String!
}

input PasskeyLoginInput {
  options: String!
  session_id: String!
}

type PasskeyLoginMutations {
  init: PasskeyLoginInit!
  login(input: PasskeyLoginInput!): Login!
}

type PasskeyMutations {
  add: String!
  authenticate(input: PasskeyAuthenticateInput!): Boolean!
  init_authenticate(id: String!): String!
  verify(options: String!): Boolean!
}

type PasskeyQueries {
  find_many: [SimplePasskey!]!
}

type PasswordMutations {
  change(input: ChangePasswordInput!): Boolean!
  check(password: String!): Boolean!
}

input PayInput {
  account_id: String
  wallet_id: String
}

input PayLiquidAddressInput {
  fee_rate: Float
  recipients: [LiquidRecipientInput!]!
  send_all_lbtc: Boolean
}

input PayLnAddressInput {
  address: String!
  amount: Float!
  payment_option: LnAddressPaymentOption
}

input PayLnInvoiceInput {
  invoice: String!
}

type PayMutations {
  lightning_invoice(input: PayLnInvoiceInput!): CreateLiquidTransaction!
  liquid_address(input: PayLiquidAddressInput!): CreateLiquidTransaction!
  money_address(input: PayLnAddressInput!): CreateLiquidTransaction!
  network_swap(input: PayNetworkSwapInput!): CreateLiquidTransaction!
  swap_address(input: PaySwapAddressInput!): CreateLiquidTransaction!
}

input PayNetworkSwapInput {
  quote_id: String!
  settle_address: String!
}

type PayQueries {
  lnurl_info(input: LnUrlInfoInput!): LnUrlInfo!
  network_swap_quote(input: SwapQuoteInput!): SwapQuote!
}

input PaySwapAddressInput {
  currency: PaySwapCurrency!
  fee_rate: Float
  network: PaySwapNetwork!
  recipient: SwapRecipientInput!
  send_all_lbtc: Boolean
}

enum PaySwapCurrency {
  BTC
}

enum PaySwapNetwork {
  BITCOIN
}

enum PaymentOptionCode {
  BTC
  LIGHTNING
  USDT
}

enum PaymentOptionNetwork {
  BITCOIN
  LIQUID
}

input PriceChartInput {
  from_date: String!
}

type PriceHistorical {
  id: String!
  interval: String!
  points: [PricePoint!]!
}

type PricePoint {
  currency: String!
  date: String!
  id: String!
  value: Float
}

type PriceQueries {
  current: PricePoint!
  historical(input: PriceChartInput!): PriceHistorical!
  id: String!
}

type Query {
  hello: String!
  passkey: PasskeyQueries!
  pay: PayQueries!
  prices: PriceQueries!
  two_factor: TwoFactorQueries!
  user: User!
  wallets: WalletQueries!
}

type ReceiveSwap {
  coin: SwapCoin!
  id: String!
  max: String!
  min: String!
  network: SwapNetwork!
  receive_address: String!
}

input ReceiveSwapInput {
  deposit_coin: SwapCoin!
  deposit_network: SwapNetwork!
  wallet_account_id: String!
}

type ReferralCode {
  code: String!
  current_uses: Float!
  id: String!
  is_available: Boolean!
  max_allowed_uses: Float!
}

type RefreshToken {
  access_token: String!
  id: String!
  refresh_token: String!
}

input RefreshWalletInput {
  full_scan: Boolean
  wallet_id: String!
}

type Secp256k1KeyPair {
  encryption_pubkey: String!
  id: String!
  protected_encryption_private_key: String!
}

input Secp256k1KeyPairInput {
  protected_private_key: String!
  public_key: String!
}

type SendMessage {
  id: String!
}

input SendMessageInput {
  contact_id: String!
  receiver_money_address: String!
  receiver_payload: String
  sender_payload: String!
}

type SetupOTP {
  otp_secret: String!
  otp_url: String!
}

input SignUpInput {
  email: String!
  master_password_hash: String!
  password_hint: String
  protected_symmetric_key: String!
  referral_code: String
  secp256k1_key_pair: Secp256k1KeyPairInput!
  wallet: CreateWalletInput
}

type SimplePasskey {
  created_at: String!
  encryption_available: Boolean!
  encryption_enabled: Boolean!
  id: String!
  name: String!
}

type SimpleSwap {
  created_at: String!
  deposit_amount: String
  deposit_coin: String!
  id: String!
  provider: SwapProvider!
  settle_amount: String
  settle_coin: String!
}

type SimpleTwoFactor {
  created_at: String!
  enabled: Boolean!
  id: String!
  method: TwoFactorMethod!
  passkey_name: String
}

type SimpleWallet {
  accounts: [SimpleWalletAccount!]!
  id: String!
  name: String!
}

type SimpleWalletAccount {
  account_type: WalletAccountType!
  id: String!
  name: String!
}

type SimpleWalletContact {
  id: String!
  money_address: String!
}

enum SwapCoin {
  BTC
  USDT
}

enum SwapNetwork {
  bitcoin
  ethereum
  liquid
  tron
}

enum SwapProvider {
  BOLTZ
  SIDESHIFT
}

type SwapQuote {
  created_at: String!
  deposit_amount: String!
  deposit_coin: String!
  deposit_network: String!
  expires_at: String!
  id: String!
  rate: String!
  settle_amount: String!
  settle_coin: String!
  settle_network: String!
}

input SwapQuoteInput {
  settle_amount: String!
  settle_coin: SwapCoin!
  settle_network: SwapNetwork!
}

input SwapRecipientInput {
  address: String!
  amount: String!
}

type TwoFactorLogin {
  methods: [SimpleTwoFactor!]!
  session_id: String!
}

type TwoFactorLoginMutations {
  otp(input: TwoFactorOTPLogin!): Login!
  passkey: TwoFactorPasskeyLoginMutations!
}

enum TwoFactorMethod {
  OTP
  PASSKEY
}

type TwoFactorMutations {
  otp: TwoFactorOTPMutations!
  passkey: TwoFactorPasskeyMutations!
}

input TwoFactorOTPLogin {
  code: String!
  session_id: String!
}

type TwoFactorOTPMutations {
  add: CreateTwoFactorOTP!
  verify(input: TwoFactorOTPVerifyInput!): Boolean!
}

input TwoFactorOTPVerifyInput {
  code: String!
}

input TwoFactorPasskeyAuthInput {
  session_id: String!
}

input TwoFactorPasskeyAuthLoginInput {
  options: String!
  session_id: String!
}

type TwoFactorPasskeyLoginMutations {
  login(input: TwoFactorPasskeyAuthLoginInput!): Login!
  options(input: TwoFactorPasskeyAuthInput!): String!
}

type TwoFactorPasskeyMutations {
  add: CreateTwoFactorPasskey!
  verify(options: String!): Boolean!
}

type TwoFactorQueries {
  find_many: [SimpleTwoFactor!]!
  id: String!
}

type User {
  amboss: AmbossInfo
  default_wallet_id: String
  email: String!
  id: String!
  protected_symmetric_key: String!
  swap_info: UserSwapInfo!
  using_passkey_id: String
  wallet: UserWalletInfo!
}

type UserSwapInfo {
  id: String!
  shifts_enabled: Boolean!
}

type UserWalletInfo {
  id: String!
  wallet_limit: Float!
}

type Wallet {
  accounts: [WalletAccount!]!
  contacts: WalletContacts!
  details: WalletDetails!
  id: String!
  money_address: [MoneyAddress!]!
  name: String!
  secp256k1_key_pair: Secp256k1KeyPair!
  swaps: WalletSwaps!
}

type WalletAccount {
  account_type: WalletAccountType!
  descriptor: String!
  id: String!
  liquid: LiquidAccount
  name: String!
}

enum WalletAccountType {
  LIQUID
}

type WalletContact {
  encryption_pubkey: String
  id: String!
  messages: [ContactMessage!]!
  money_address: String!
  payment_options: [LnUrlCurrency!]
}

type WalletContacts {
  find_many: [SimpleWalletContact!]!
  find_one(id: String!): WalletContact!
  id: String!
}

type WalletDetails {
  id: String!
  protected_mnemonic: String
  type: WalletType!
}

type WalletMutations {
  broadcast_liquid_transaction(input: BroadcastLiquidTransactionInput!): BroadcastLiquidTransaction!
  change_name(id: String!, name: String!): Boolean!
  create(input: CreateWalletInput!): CreateWallet!
  create_lightning_invoice(input: CreateLightingInvoiceInput!): CreateLightingInvoice!
  create_onchain_address(input: CreateOnchainAddressInput!): CreateOnchainAddress!
  create_onchain_address_swap(input: ReceiveSwapInput!): ReceiveSwap!
  refresh_wallet(input: RefreshWalletInput!): Boolean!
}

type WalletQueries {
  find_many: [SimpleWallet!]!
  find_one(id: String!): Wallet!
  id: String!
}

type WalletSwaps {
  find_many: [SimpleSwap!]!
  id: String!
}

enum WalletType {
  CLIENT_GENERATED
}